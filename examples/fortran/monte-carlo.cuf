program curand_example
    use cudafor
    use curand
    implicit none
    real, allocatable :: hostData(:)
    real, allocatable, device :: deviceData(:)
    real :: pival
    integer :: N, seed, istat, inside_gpu, i, twoN
    integer :: inside_cpu
    type(curandGenerator) :: gen

    ! Número de elementos en el arreglo
    N = 10000000
    twoN = N*N

    ! Generar la memoria para los arreglos
    allocate( hostData(twoN) )
    allocate( deviceData(twoN) )

    ! Crear el RNG, istat debe ser 0
    istat = curandCreateGenerator( gen, CURAND_RNG_PSEUDO_DEFAULT )
    print*, istat

    ! Asignarle una semilla al RNG
    seed = 312343416
    istat = curandSetPseudoRandomGeneratorSeed( gen,seed )
    print*, istat

    ! Crear N*N números aleatorios uniformes, en GPU
    istat = curandGenerateUniform( gen,deviceData,twoN )
    print*, istat

    ! Copiar implícitamente datos de GPU a CPU
    hostData = deviceData

    ! Aquí se emplea un CUF kernel (automático)
    inside_gpu = 0
    !$cuf kernel do <<<*,*>>>
    do i = 1,N
        if ( (deviceData(i)**2 + deviceData(i+N)**2) <= 1.0 ) then
            inside_gpu = inside_gpu + 1
        end if
    end do

    ! Se compara el mismo resultado en el CPU
    inside_cpu = 0
    do i = 1,N
        if ( (hostData(i)**2 + hostData(i+N)**2) <= 1.0 ) then
            inside_cpu = inside_cpu + 1
        end if
    end do

    if (inside_cpu .ne. inside_gpu) then
        write(*,*) "Mismatch between CPU/GPU"
    end if

    ! Finalmente, se comprueba el resultado obtenido
    pival = 4.0*real(inside_gpu)/real(N)
    write(*,"(t3,a,i10,a,f10.8,a,e11.4)") "Samples=", N, &
    "  Pi=", pival, &
    "  Error=", abs(pival -2.0*asin(1.0))

    ! Se limpia la memoria
    deallocate( hostData )
    deallocate( deviceData )
    istat = curandDestroyGenerator( gen )
    print*, istat
end program curand_example